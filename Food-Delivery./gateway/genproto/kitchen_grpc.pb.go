// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: kitchen.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	KitchenService_CreateKitchen_FullMethodName = "/submodule.KitchenService/CreateKitchen"
	KitchenService_UpdateKitchen_FullMethodName = "/submodule.KitchenService/UpdateKitchen"
	KitchenService_DeleteKitchen_FullMethodName = "/submodule.KitchenService/DeleteKitchen"
	KitchenService_ListKitchens_FullMethodName  = "/submodule.KitchenService/ListKitchens"
	KitchenService_GetKitchen_FullMethodName    = "/submodule.KitchenService/GetKitchen"
)

// KitchenServiceClient is the client API for KitchenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KitchenServiceClient interface {
	CreateKitchen(ctx context.Context, in *KitchenCreateReq, opts ...grpc.CallOption) (*Void, error)
	UpdateKitchen(ctx context.Context, in *KitchenCreateReq, opts ...grpc.CallOption) (*Void, error)
	DeleteKitchen(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	ListKitchens(ctx context.Context, in *KitchenFilter, opts ...grpc.CallOption) (*KitchenList, error)
	GetKitchen(ctx context.Context, in *ById, opts ...grpc.CallOption) (*KitchenGet, error)
}

type kitchenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKitchenServiceClient(cc grpc.ClientConnInterface) KitchenServiceClient {
	return &kitchenServiceClient{cc}
}

func (c *kitchenServiceClient) CreateKitchen(ctx context.Context, in *KitchenCreateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, KitchenService_CreateKitchen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) UpdateKitchen(ctx context.Context, in *KitchenCreateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, KitchenService_UpdateKitchen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) DeleteKitchen(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, KitchenService_DeleteKitchen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) ListKitchens(ctx context.Context, in *KitchenFilter, opts ...grpc.CallOption) (*KitchenList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KitchenList)
	err := c.cc.Invoke(ctx, KitchenService_ListKitchens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) GetKitchen(ctx context.Context, in *ById, opts ...grpc.CallOption) (*KitchenGet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KitchenGet)
	err := c.cc.Invoke(ctx, KitchenService_GetKitchen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KitchenServiceServer is the server API for KitchenService service.
// All implementations must embed UnimplementedKitchenServiceServer
// for forward compatibility
type KitchenServiceServer interface {
	CreateKitchen(context.Context, *KitchenCreateReq) (*Void, error)
	UpdateKitchen(context.Context, *KitchenCreateReq) (*Void, error)
	DeleteKitchen(context.Context, *ById) (*Void, error)
	ListKitchens(context.Context, *KitchenFilter) (*KitchenList, error)
	GetKitchen(context.Context, *ById) (*KitchenGet, error)
	mustEmbedUnimplementedKitchenServiceServer()
}

// UnimplementedKitchenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKitchenServiceServer struct {
}

func (UnimplementedKitchenServiceServer) CreateKitchen(context.Context, *KitchenCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKitchen not implemented")
}
func (UnimplementedKitchenServiceServer) UpdateKitchen(context.Context, *KitchenCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKitchen not implemented")
}
func (UnimplementedKitchenServiceServer) DeleteKitchen(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKitchen not implemented")
}
func (UnimplementedKitchenServiceServer) ListKitchens(context.Context, *KitchenFilter) (*KitchenList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKitchens not implemented")
}
func (UnimplementedKitchenServiceServer) GetKitchen(context.Context, *ById) (*KitchenGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKitchen not implemented")
}
func (UnimplementedKitchenServiceServer) mustEmbedUnimplementedKitchenServiceServer() {}

// UnsafeKitchenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KitchenServiceServer will
// result in compilation errors.
type UnsafeKitchenServiceServer interface {
	mustEmbedUnimplementedKitchenServiceServer()
}

func RegisterKitchenServiceServer(s grpc.ServiceRegistrar, srv KitchenServiceServer) {
	s.RegisterService(&KitchenService_ServiceDesc, srv)
}

func _KitchenService_CreateKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KitchenCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).CreateKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_CreateKitchen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).CreateKitchen(ctx, req.(*KitchenCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_UpdateKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KitchenCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).UpdateKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_UpdateKitchen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).UpdateKitchen(ctx, req.(*KitchenCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_DeleteKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).DeleteKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_DeleteKitchen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).DeleteKitchen(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_ListKitchens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KitchenFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).ListKitchens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_ListKitchens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).ListKitchens(ctx, req.(*KitchenFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_GetKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).GetKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_GetKitchen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).GetKitchen(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// KitchenService_ServiceDesc is the grpc.ServiceDesc for KitchenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KitchenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "submodule.KitchenService",
	HandlerType: (*KitchenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKitchen",
			Handler:    _KitchenService_CreateKitchen_Handler,
		},
		{
			MethodName: "UpdateKitchen",
			Handler:    _KitchenService_UpdateKitchen_Handler,
		},
		{
			MethodName: "DeleteKitchen",
			Handler:    _KitchenService_DeleteKitchen_Handler,
		},
		{
			MethodName: "ListKitchens",
			Handler:    _KitchenService_ListKitchens_Handler,
		},
		{
			MethodName: "GetKitchen",
			Handler:    _KitchenService_GetKitchen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kitchen.proto",
}
