// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: OrderRecom.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OrderRecommendationService_CreateOrderRecommendation_FullMethodName = "/ecommerce.OrderRecommendationService/CreateOrderRecommendation"
	OrderRecommendationService_GetOrderRecommendation_FullMethodName    = "/ecommerce.OrderRecommendationService/GetOrderRecommendation"
	OrderRecommendationService_UpdateOrderRecommendation_FullMethodName = "/ecommerce.OrderRecommendationService/UpdateOrderRecommendation"
	OrderRecommendationService_DeleteOrderRecommendation_FullMethodName = "/ecommerce.OrderRecommendationService/DeleteOrderRecommendation"
	OrderRecommendationService_ListOrderRecommendations_FullMethodName  = "/ecommerce.OrderRecommendationService/ListOrderRecommendations"
)

// OrderRecommendationServiceClient is the client API for OrderRecommendationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to manage order recommendations
type OrderRecommendationServiceClient interface {
	// Buyurtma tavsiyasi yaratish
	CreateOrderRecommendation(ctx context.Context, in *CreateOrderRecommendationRequest, opts ...grpc.CallOption) (*OrderRecommendationResponse, error)
	// Buyurtma tavsiyasi ma'lumotlarini olish
	GetOrderRecommendation(ctx context.Context, in *OrderRecommendationRequest, opts ...grpc.CallOption) (*OrderRecommendationResponse, error)
	// Buyurtma tavsiyasini yangilash
	UpdateOrderRecommendation(ctx context.Context, in *UpdateOrderRecommendationRequest, opts ...grpc.CallOption) (*OrderRecommendationResponse, error)
	// Buyurtma tavsiyasini o'chirish
	DeleteOrderRecommendation(ctx context.Context, in *OrderRecommendationRequest, opts ...grpc.CallOption) (*OrderRecommendationResponse, error)
	// Barcha buyurtma tavsiyalari ro'yxatini olish
	ListOrderRecommendations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrderRecommendationListResponse, error)
}

type orderRecommendationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderRecommendationServiceClient(cc grpc.ClientConnInterface) OrderRecommendationServiceClient {
	return &orderRecommendationServiceClient{cc}
}

func (c *orderRecommendationServiceClient) CreateOrderRecommendation(ctx context.Context, in *CreateOrderRecommendationRequest, opts ...grpc.CallOption) (*OrderRecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderRecommendationResponse)
	err := c.cc.Invoke(ctx, OrderRecommendationService_CreateOrderRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRecommendationServiceClient) GetOrderRecommendation(ctx context.Context, in *OrderRecommendationRequest, opts ...grpc.CallOption) (*OrderRecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderRecommendationResponse)
	err := c.cc.Invoke(ctx, OrderRecommendationService_GetOrderRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRecommendationServiceClient) UpdateOrderRecommendation(ctx context.Context, in *UpdateOrderRecommendationRequest, opts ...grpc.CallOption) (*OrderRecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderRecommendationResponse)
	err := c.cc.Invoke(ctx, OrderRecommendationService_UpdateOrderRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRecommendationServiceClient) DeleteOrderRecommendation(ctx context.Context, in *OrderRecommendationRequest, opts ...grpc.CallOption) (*OrderRecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderRecommendationResponse)
	err := c.cc.Invoke(ctx, OrderRecommendationService_DeleteOrderRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRecommendationServiceClient) ListOrderRecommendations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrderRecommendationListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderRecommendationListResponse)
	err := c.cc.Invoke(ctx, OrderRecommendationService_ListOrderRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderRecommendationServiceServer is the server API for OrderRecommendationService service.
// All implementations must embed UnimplementedOrderRecommendationServiceServer
// for forward compatibility
//
// Service to manage order recommendations
type OrderRecommendationServiceServer interface {
	// Buyurtma tavsiyasi yaratish
	CreateOrderRecommendation(context.Context, *CreateOrderRecommendationRequest) (*OrderRecommendationResponse, error)
	// Buyurtma tavsiyasi ma'lumotlarini olish
	GetOrderRecommendation(context.Context, *OrderRecommendationRequest) (*OrderRecommendationResponse, error)
	// Buyurtma tavsiyasini yangilash
	UpdateOrderRecommendation(context.Context, *UpdateOrderRecommendationRequest) (*OrderRecommendationResponse, error)
	// Buyurtma tavsiyasini o'chirish
	DeleteOrderRecommendation(context.Context, *OrderRecommendationRequest) (*OrderRecommendationResponse, error)
	// Barcha buyurtma tavsiyalari ro'yxatini olish
	ListOrderRecommendations(context.Context, *Empty) (*OrderRecommendationListResponse, error)
	mustEmbedUnimplementedOrderRecommendationServiceServer()
}

// UnimplementedOrderRecommendationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderRecommendationServiceServer struct {
}

func (UnimplementedOrderRecommendationServiceServer) CreateOrderRecommendation(context.Context, *CreateOrderRecommendationRequest) (*OrderRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderRecommendation not implemented")
}
func (UnimplementedOrderRecommendationServiceServer) GetOrderRecommendation(context.Context, *OrderRecommendationRequest) (*OrderRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderRecommendation not implemented")
}
func (UnimplementedOrderRecommendationServiceServer) UpdateOrderRecommendation(context.Context, *UpdateOrderRecommendationRequest) (*OrderRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderRecommendation not implemented")
}
func (UnimplementedOrderRecommendationServiceServer) DeleteOrderRecommendation(context.Context, *OrderRecommendationRequest) (*OrderRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderRecommendation not implemented")
}
func (UnimplementedOrderRecommendationServiceServer) ListOrderRecommendations(context.Context, *Empty) (*OrderRecommendationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderRecommendations not implemented")
}
func (UnimplementedOrderRecommendationServiceServer) mustEmbedUnimplementedOrderRecommendationServiceServer() {
}

// UnsafeOrderRecommendationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderRecommendationServiceServer will
// result in compilation errors.
type UnsafeOrderRecommendationServiceServer interface {
	mustEmbedUnimplementedOrderRecommendationServiceServer()
}

func RegisterOrderRecommendationServiceServer(s grpc.ServiceRegistrar, srv OrderRecommendationServiceServer) {
	s.RegisterService(&OrderRecommendationService_ServiceDesc, srv)
}

func _OrderRecommendationService_CreateOrderRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRecommendationServiceServer).CreateOrderRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRecommendationService_CreateOrderRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRecommendationServiceServer).CreateOrderRecommendation(ctx, req.(*CreateOrderRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRecommendationService_GetOrderRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRecommendationServiceServer).GetOrderRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRecommendationService_GetOrderRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRecommendationServiceServer).GetOrderRecommendation(ctx, req.(*OrderRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRecommendationService_UpdateOrderRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRecommendationServiceServer).UpdateOrderRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRecommendationService_UpdateOrderRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRecommendationServiceServer).UpdateOrderRecommendation(ctx, req.(*UpdateOrderRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRecommendationService_DeleteOrderRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRecommendationServiceServer).DeleteOrderRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRecommendationService_DeleteOrderRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRecommendationServiceServer).DeleteOrderRecommendation(ctx, req.(*OrderRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRecommendationService_ListOrderRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRecommendationServiceServer).ListOrderRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRecommendationService_ListOrderRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRecommendationServiceServer).ListOrderRecommendations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderRecommendationService_ServiceDesc is the grpc.ServiceDesc for OrderRecommendationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderRecommendationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.OrderRecommendationService",
	HandlerType: (*OrderRecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderRecommendation",
			Handler:    _OrderRecommendationService_CreateOrderRecommendation_Handler,
		},
		{
			MethodName: "GetOrderRecommendation",
			Handler:    _OrderRecommendationService_GetOrderRecommendation_Handler,
		},
		{
			MethodName: "UpdateOrderRecommendation",
			Handler:    _OrderRecommendationService_UpdateOrderRecommendation_Handler,
		},
		{
			MethodName: "DeleteOrderRecommendation",
			Handler:    _OrderRecommendationService_DeleteOrderRecommendation_Handler,
		},
		{
			MethodName: "ListOrderRecommendations",
			Handler:    _OrderRecommendationService_ListOrderRecommendations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OrderRecom.proto",
}
