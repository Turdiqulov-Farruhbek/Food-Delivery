// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: userNtfn.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserNotificationService_CreateUserNotification_FullMethodName = "/ecommerce.UserNotificationService/CreateUserNotification"
	UserNotificationService_GetUserNotification_FullMethodName    = "/ecommerce.UserNotificationService/GetUserNotification"
	UserNotificationService_DeleteUserNotification_FullMethodName = "/ecommerce.UserNotificationService/DeleteUserNotification"
	UserNotificationService_ListUserNotifications_FullMethodName  = "/ecommerce.UserNotificationService/ListUserNotifications"
)

// UserNotificationServiceClient is the client API for UserNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to manage user notifications
type UserNotificationServiceClient interface {
	// Foydalanuvchi bildirishnomasini yaratish
	CreateUserNotification(ctx context.Context, in *CreateUserNotificationRequest, opts ...grpc.CallOption) (*UserNotificationResponse, error)
	// Foydalanuvchi bildirishnomasini olish
	GetUserNotification(ctx context.Context, in *UserNotificationRequest, opts ...grpc.CallOption) (*UserNotificationResponse, error)
	// Foydalanuvchi bildirishnomasini o'chirish
	DeleteUserNotification(ctx context.Context, in *UserNotificationRequest, opts ...grpc.CallOption) (*UserNotificationResponse, error)
	// Barcha foydalanuvchi bildirishnomalarini olish
	ListUserNotifications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserNotificationListResponse, error)
}

type userNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserNotificationServiceClient(cc grpc.ClientConnInterface) UserNotificationServiceClient {
	return &userNotificationServiceClient{cc}
}

func (c *userNotificationServiceClient) CreateUserNotification(ctx context.Context, in *CreateUserNotificationRequest, opts ...grpc.CallOption) (*UserNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserNotificationResponse)
	err := c.cc.Invoke(ctx, UserNotificationService_CreateUserNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNotificationServiceClient) GetUserNotification(ctx context.Context, in *UserNotificationRequest, opts ...grpc.CallOption) (*UserNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserNotificationResponse)
	err := c.cc.Invoke(ctx, UserNotificationService_GetUserNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNotificationServiceClient) DeleteUserNotification(ctx context.Context, in *UserNotificationRequest, opts ...grpc.CallOption) (*UserNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserNotificationResponse)
	err := c.cc.Invoke(ctx, UserNotificationService_DeleteUserNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNotificationServiceClient) ListUserNotifications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserNotificationListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserNotificationListResponse)
	err := c.cc.Invoke(ctx, UserNotificationService_ListUserNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserNotificationServiceServer is the server API for UserNotificationService service.
// All implementations must embed UnimplementedUserNotificationServiceServer
// for forward compatibility
//
// Service to manage user notifications
type UserNotificationServiceServer interface {
	// Foydalanuvchi bildirishnomasini yaratish
	CreateUserNotification(context.Context, *CreateUserNotificationRequest) (*UserNotificationResponse, error)
	// Foydalanuvchi bildirishnomasini olish
	GetUserNotification(context.Context, *UserNotificationRequest) (*UserNotificationResponse, error)
	// Foydalanuvchi bildirishnomasini o'chirish
	DeleteUserNotification(context.Context, *UserNotificationRequest) (*UserNotificationResponse, error)
	// Barcha foydalanuvchi bildirishnomalarini olish
	ListUserNotifications(context.Context, *Empty) (*UserNotificationListResponse, error)
	mustEmbedUnimplementedUserNotificationServiceServer()
}

// UnimplementedUserNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserNotificationServiceServer struct {
}

func (UnimplementedUserNotificationServiceServer) CreateUserNotification(context.Context, *CreateUserNotificationRequest) (*UserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserNotification not implemented")
}
func (UnimplementedUserNotificationServiceServer) GetUserNotification(context.Context, *UserNotificationRequest) (*UserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotification not implemented")
}
func (UnimplementedUserNotificationServiceServer) DeleteUserNotification(context.Context, *UserNotificationRequest) (*UserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserNotification not implemented")
}
func (UnimplementedUserNotificationServiceServer) ListUserNotifications(context.Context, *Empty) (*UserNotificationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserNotifications not implemented")
}
func (UnimplementedUserNotificationServiceServer) mustEmbedUnimplementedUserNotificationServiceServer() {
}

// UnsafeUserNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserNotificationServiceServer will
// result in compilation errors.
type UnsafeUserNotificationServiceServer interface {
	mustEmbedUnimplementedUserNotificationServiceServer()
}

func RegisterUserNotificationServiceServer(s grpc.ServiceRegistrar, srv UserNotificationServiceServer) {
	s.RegisterService(&UserNotificationService_ServiceDesc, srv)
}

func _UserNotificationService_CreateUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNotificationServiceServer).CreateUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNotificationService_CreateUserNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNotificationServiceServer).CreateUserNotification(ctx, req.(*CreateUserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNotificationService_GetUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNotificationServiceServer).GetUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNotificationService_GetUserNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNotificationServiceServer).GetUserNotification(ctx, req.(*UserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNotificationService_DeleteUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNotificationServiceServer).DeleteUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNotificationService_DeleteUserNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNotificationServiceServer).DeleteUserNotification(ctx, req.(*UserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNotificationService_ListUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNotificationServiceServer).ListUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserNotificationService_ListUserNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNotificationServiceServer).ListUserNotifications(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserNotificationService_ServiceDesc is the grpc.ServiceDesc for UserNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.UserNotificationService",
	HandlerType: (*UserNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserNotification",
			Handler:    _UserNotificationService_CreateUserNotification_Handler,
		},
		{
			MethodName: "GetUserNotification",
			Handler:    _UserNotificationService_GetUserNotification_Handler,
		},
		{
			MethodName: "DeleteUserNotification",
			Handler:    _UserNotificationService_DeleteUserNotification_Handler,
		},
		{
			MethodName: "ListUserNotifications",
			Handler:    _UserNotificationService_ListUserNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userNtfn.proto",
}
