// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: courier_Order.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CourierOrderService_CreateCourierOrder_FullMethodName = "/ecommerce.CourierOrderService/CreateCourierOrder"
	CourierOrderService_GetCourierOrder_FullMethodName    = "/ecommerce.CourierOrderService/GetCourierOrder"
	CourierOrderService_UpdateCourierOrder_FullMethodName = "/ecommerce.CourierOrderService/UpdateCourierOrder"
	CourierOrderService_DeleteCourierOrder_FullMethodName = "/ecommerce.CourierOrderService/DeleteCourierOrder"
	CourierOrderService_ListCourierOrders_FullMethodName  = "/ecommerce.CourierOrderService/ListCourierOrders"
)

// CourierOrderServiceClient is the client API for CourierOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to manage courier orders
type CourierOrderServiceClient interface {
	// Kuryer-buyurtma munosabatini yaratish
	CreateCourierOrder(ctx context.Context, in *CreateCourierOrderRequest, opts ...grpc.CallOption) (*CourierOrderResponse, error)
	// Kuryer-buyurtma munosabati ma'lumotlarini olish
	GetCourierOrder(ctx context.Context, in *CourierOrderRequest, opts ...grpc.CallOption) (*CourierOrderResponse, error)
	// Kuryer-buyurtma munosabatini yangilash
	UpdateCourierOrder(ctx context.Context, in *UpdateCourierOrderRequest, opts ...grpc.CallOption) (*CourierOrderResponse, error)
	// Kuryer-buyurtma munosabatini o'chirish
	DeleteCourierOrder(ctx context.Context, in *CourierOrderRequest, opts ...grpc.CallOption) (*CourierOrderResponse, error)
	// Barcha kuryer-buyurtma munosabatlari ro'yxatini olish
	ListCourierOrders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CourierOrderListResponse, error)
}

type courierOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierOrderServiceClient(cc grpc.ClientConnInterface) CourierOrderServiceClient {
	return &courierOrderServiceClient{cc}
}

func (c *courierOrderServiceClient) CreateCourierOrder(ctx context.Context, in *CreateCourierOrderRequest, opts ...grpc.CallOption) (*CourierOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierOrderResponse)
	err := c.cc.Invoke(ctx, CourierOrderService_CreateCourierOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierOrderServiceClient) GetCourierOrder(ctx context.Context, in *CourierOrderRequest, opts ...grpc.CallOption) (*CourierOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierOrderResponse)
	err := c.cc.Invoke(ctx, CourierOrderService_GetCourierOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierOrderServiceClient) UpdateCourierOrder(ctx context.Context, in *UpdateCourierOrderRequest, opts ...grpc.CallOption) (*CourierOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierOrderResponse)
	err := c.cc.Invoke(ctx, CourierOrderService_UpdateCourierOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierOrderServiceClient) DeleteCourierOrder(ctx context.Context, in *CourierOrderRequest, opts ...grpc.CallOption) (*CourierOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierOrderResponse)
	err := c.cc.Invoke(ctx, CourierOrderService_DeleteCourierOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierOrderServiceClient) ListCourierOrders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CourierOrderListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierOrderListResponse)
	err := c.cc.Invoke(ctx, CourierOrderService_ListCourierOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierOrderServiceServer is the server API for CourierOrderService service.
// All implementations must embed UnimplementedCourierOrderServiceServer
// for forward compatibility
//
// Service to manage courier orders
type CourierOrderServiceServer interface {
	// Kuryer-buyurtma munosabatini yaratish
	CreateCourierOrder(context.Context, *CreateCourierOrderRequest) (*CourierOrderResponse, error)
	// Kuryer-buyurtma munosabati ma'lumotlarini olish
	GetCourierOrder(context.Context, *CourierOrderRequest) (*CourierOrderResponse, error)
	// Kuryer-buyurtma munosabatini yangilash
	UpdateCourierOrder(context.Context, *UpdateCourierOrderRequest) (*CourierOrderResponse, error)
	// Kuryer-buyurtma munosabatini o'chirish
	DeleteCourierOrder(context.Context, *CourierOrderRequest) (*CourierOrderResponse, error)
	// Barcha kuryer-buyurtma munosabatlari ro'yxatini olish
	ListCourierOrders(context.Context, *Empty) (*CourierOrderListResponse, error)
	mustEmbedUnimplementedCourierOrderServiceServer()
}

// UnimplementedCourierOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourierOrderServiceServer struct {
}

func (UnimplementedCourierOrderServiceServer) CreateCourierOrder(context.Context, *CreateCourierOrderRequest) (*CourierOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourierOrder not implemented")
}
func (UnimplementedCourierOrderServiceServer) GetCourierOrder(context.Context, *CourierOrderRequest) (*CourierOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierOrder not implemented")
}
func (UnimplementedCourierOrderServiceServer) UpdateCourierOrder(context.Context, *UpdateCourierOrderRequest) (*CourierOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourierOrder not implemented")
}
func (UnimplementedCourierOrderServiceServer) DeleteCourierOrder(context.Context, *CourierOrderRequest) (*CourierOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourierOrder not implemented")
}
func (UnimplementedCourierOrderServiceServer) ListCourierOrders(context.Context, *Empty) (*CourierOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourierOrders not implemented")
}
func (UnimplementedCourierOrderServiceServer) mustEmbedUnimplementedCourierOrderServiceServer() {}

// UnsafeCourierOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierOrderServiceServer will
// result in compilation errors.
type UnsafeCourierOrderServiceServer interface {
	mustEmbedUnimplementedCourierOrderServiceServer()
}

func RegisterCourierOrderServiceServer(s grpc.ServiceRegistrar, srv CourierOrderServiceServer) {
	s.RegisterService(&CourierOrderService_ServiceDesc, srv)
}

func _CourierOrderService_CreateCourierOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourierOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierOrderServiceServer).CreateCourierOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierOrderService_CreateCourierOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierOrderServiceServer).CreateCourierOrder(ctx, req.(*CreateCourierOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierOrderService_GetCourierOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierOrderServiceServer).GetCourierOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierOrderService_GetCourierOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierOrderServiceServer).GetCourierOrder(ctx, req.(*CourierOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierOrderService_UpdateCourierOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourierOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierOrderServiceServer).UpdateCourierOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierOrderService_UpdateCourierOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierOrderServiceServer).UpdateCourierOrder(ctx, req.(*UpdateCourierOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierOrderService_DeleteCourierOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourierOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierOrderServiceServer).DeleteCourierOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierOrderService_DeleteCourierOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierOrderServiceServer).DeleteCourierOrder(ctx, req.(*CourierOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierOrderService_ListCourierOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierOrderServiceServer).ListCourierOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierOrderService_ListCourierOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierOrderServiceServer).ListCourierOrders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CourierOrderService_ServiceDesc is the grpc.ServiceDesc for CourierOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourierOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.CourierOrderService",
	HandlerType: (*CourierOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourierOrder",
			Handler:    _CourierOrderService_CreateCourierOrder_Handler,
		},
		{
			MethodName: "GetCourierOrder",
			Handler:    _CourierOrderService_GetCourierOrder_Handler,
		},
		{
			MethodName: "UpdateCourierOrder",
			Handler:    _CourierOrderService_UpdateCourierOrder_Handler,
		},
		{
			MethodName: "DeleteCourierOrder",
			Handler:    _CourierOrderService_DeleteCourierOrder_Handler,
		},
		{
			MethodName: "ListCourierOrders",
			Handler:    _CourierOrderService_ListCourierOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courier_Order.proto",
}
